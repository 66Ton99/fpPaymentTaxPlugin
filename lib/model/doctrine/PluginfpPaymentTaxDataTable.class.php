<?php

/**
 * PluginfpPaymentTaxDataTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginfpPaymentTaxDataTable extends Doctrine_Table
{

  /**
   * Returns an instance of this class.
   *
   * @return PluginfpPaymentTaxDataTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('PluginfpPaymentTaxData');
  }
  
	/**
   * Get tax data value by customer profile
   *
   * @param fpPaymentCustomerProfile $profile
   * @param Product $product
   *
   * @return PluginfpPaymentTaxData
   */
  public function getTaxByProfileAndProduct($profile, $product)
  {
    $taxDatas = $this->createQuery('td')
      ->innerJoin('td.fpPaymentTaxToData as ttd')
        ->andWhere('ttd.tax_id = ?', $product->getTaxId())
      ->andWhere('td.country = ?', $profile->getCountry())
      ->andWhere('(td.state = "' . $profile->getState() . '" OR td.state = "")')
      ->execute();
      
    if (empty($taxDatas) || !$taxDatas->count()) return null;
    
    if (1 == $taxDatas->count()) return $taxDatas->getFirst();
    
    $taxesByZip = array();
    /* @var $taxData fpPaymentTaxData */
    foreach ($taxDatas as $taxData) {
      if ($taxData->isContainedZip($profile->getZip())) {
        $taxesByZip[] = $taxData;
      }
    }
    
    if (1 == count($taxesByZip)) return array_shift($taxesByZip);
    
    if (1 < count($taxesByZip)) {
      return $this->getTaxFromFewIdentical($taxesByZip);
    }
    
    $taxesWithEmptyState = array();
    $taxesByState = array();
    foreach ($taxDatas as $taxData) {
      if ($taxData->getZip()) continue;
      if ($taxData->getState() == $profile->getState()) {
        $taxesByState[] = $taxData;
      } elseif ('' == $taxData->getState()) {
        $taxesWithEmptyState[] = $taxData;
      }
    }
    
    if (1 == count($taxesByState)) return array_shift($taxesByState);
    if (1 < count($taxesByState)) {
      return $this->getTaxFromFewIdentical($taxesByState);
    }
    
    if (1 == count($taxesWithEmptyState)) return array_shift($taxesWithEmptyState);
    if (1 < count($taxesWithEmptyState)) {
      return $this->getTaxFromFewIdentical($taxesWithEmptyState);
    }
    return $this->getTaxFromFewIdentical($taxDatas);
  }
  
  /**
   * Get one tax from few identical
   *
   * @param fpPaymentTaxDataTable[] $taxes
   *
   * @return fpPaymentTaxDataTable
   */
  public function getTaxFromFewIdentical(array $taxes)
  {
    $maxTax = null;
    $maxTaxVal = 0;
    foreach ($taxes as $taxData) {
      if ($taxData->getRate() > $maxTaxVal) {
        $maxTaxVal = $taxData->getRate();
        $maxTax = $taxData;
      }
    }
    return $maxTax;
  }
  
}